name: Unity CI/CD

on:
  pull_request:
    branches:
      - dev
      - main
  push:
    branches:
      - dev
      - main

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  test:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-

      - name: Run tests
        uses: game-ci/unity-test-runner@v3
        with:
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ matrix.testMode }}-artifacts

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - iOS
          - Android
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-Build-${{ matrix.targetPlatform }}
          restore-keys: Library-Build-

      - name: Build Unity Project
        uses: game-ci/unity-builder@v3
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  deploy:
    name: Deploy to MCP
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Android build
        uses: actions/download-artifact@v3
        with:
          name: Build-Android
          path: Builds/Android

      - name: Deploy to Unity MCP
        env:
          MCP_TOKEN: ${{ secrets.MCP_TOKEN }}
        run: |
          # Install Unity MCP CLI
          npm install -g unity-mcp-cli
          
          # Deploy to internal track
          unity-mcp deploy \
            --build "Builds/Android/Android.apk" \
            --track internal \
            --token "$MCP_TOKEN" 